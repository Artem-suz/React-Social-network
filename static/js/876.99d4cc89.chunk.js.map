{"version":3,"file":"static/js/876.99d4cc89.chunk.js","mappings":"mMACA,G,QAA8B,8BAA9B,EAAqE,yBAArE,EAAyG,0BAAzG,EAAqJ,iCAArJ,EAAgM,yBAAhM,EAAgR,uBAAhR,EAA2T,mCAA3T,EAA+W,gCCA/W,EAA0B,6B,SCW1B,EAVoB,SAACA,GACjB,OACI,0BACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMG,a,UCJ9C,EAAyB,2BAAzB,EAA6D,2BAA7D,EAA8F,wBCExFC,EAAY,SAAC,GACf,OAD8B,EAAdC,SACIH,EAAW,IAoBnC,EAjBmB,SAACF,GAChB,IAAIM,EAAO,YAAaN,EAAMO,GAE9B,OACI,gBAAKN,UAAWC,EAAhB,UAEI,UAAC,KAAD,CAASM,GAAKF,EAAML,UAAWG,EAA/B,WACI,gBAAKH,UAAWC,EAAOO,IAAKT,EAAMU,IAAKC,IAAI,gBAC1CX,EAAMY,W,6BCkCjBC,EAAgB,SAACb,GACnB,IAAMc,EAAmBC,EAAAA,KAAaC,MAAM,CACxCC,YAAaF,EAAAA,KACRG,IAAI,IAAI,cAEjB,OACI,SAAC,KAAD,CACQC,cAAe,CACXF,YAAY,IAEhBG,gBAAc,EACdC,SAAU,SAACC,EAAQC,GACfvB,EAAMwB,YAAYF,EAAOL,aACzBM,EAAQE,UAAU,CAACR,YAAa,MAGpCH,iBAAkBA,EAV1B,SAYS,gBAAEQ,EAAF,EAAEA,OAAQI,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,aAAcC,EAAzC,EAAyCA,WAAYC,EAArD,EAAqDA,QAASC,EAA9D,EAA8DA,aAAcC,EAA5E,EAA4EA,MAA5E,OAEO,UAAC,KAAD,YACI,0BACI,SAAC,KAAD,CACAC,YAAY,qBACZC,KAAM,OACNtB,KAAM,cACNuB,UAAaC,EAAAA,GACbC,SAAUT,EACVU,OAAQT,EACRU,MAAOjB,EAAOL,gBAIjBU,EAAQV,aAAeS,EAAOT,cAAe,cAAGhB,UAAWC,EAAd,SAAwBwB,EAAOT,eAC7E,gBAAKhB,UAAWC,EAAhB,UAEI,mBACIsC,UAAWV,IAAYE,EACvBS,QAASV,EACTG,KAAM,SAHV,2BAgBhC,EA5FgB,SAAClC,GAOT,OACI,gBAAKC,UAAWC,EAAhB,UAEI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SAGQF,EAAM0C,QAAQC,KAAI,SAACC,GACf,OAAO,SAAC,EAAD,CAAYhC,KAAMgC,EAAEhC,KAAML,GAAIqC,EAAErC,GAAeG,IAAKkC,EAAElC,KAAbkC,EAAErC,UAM9D,gBAAKN,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SAEQF,EAAM6C,SAASF,KAAI,SAACG,GAChB,OAAO,SAAC,EAAD,CAAa3C,QAAS2C,EAAE3C,QAASI,GAAIuC,EAAEvC,IAASuC,EAAEvC,UAIrE,SAAC,EAAD,CAAeiB,YA5BnB,SAACP,GACjBjB,EAAMwB,YAAYP,iBCc1B,GAAe8B,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAZoB,SAACC,GACrB,MAAO,CACHP,QAASO,EAAMC,YAAYR,QAC3BG,SAAUI,EAAMC,YAAYL,SAC5BM,eAAgBF,EAAMC,YAAYC,kBAQd,CACpB3B,YAAaA,EAAAA,IAFrB,CAKE4B","sources":["webpack://react-kabzda-1/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://react-kabzda-1/./src/components/Dialogs/MessageItem/MessageItem.module.css?481d","components/Dialogs/MessageItem/MessageItem.jsx","webpack://react-kabzda-1/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"pageDialogs\":\"Dialogs_pageDialogs__WHFua\",\"dialogs\":\"Dialogs_dialogs__xS83o\",\"messages\":\"Dialogs_messages__jWYJC\",\"messagesWrapper\":\"Dialogs_messagesWrapper__WKukP\",\"mesText\":\"Dialogs_mesText__Jc1lx\",\"chatInputText\":\"Dialogs_chatInputText__4MrZw\",\"error\":\"Dialogs_error__v6KrY\",\"appWrapperContent\":\"Dialogs_appWrapperContent__YEGWB\",\"dialogsBtnSend\":\"Dialogs_dialogsBtnSend__i7wTF\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"MessageItem_message__Exre2\"};","import s from './MessageItem.module.css'\r\n\r\nconst MessageItem = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.message}>{props.message}</div>\r\n        </div>    \r\n    )\r\n}\r\n\r\n\r\n\r\nexport default MessageItem","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__hDKiN\",\"active\":\"DialogItem_active__5unxN\",\"img\":\"DialogItem_img__YVJHV\"};","import { NavLink } from 'react-router-dom'\r\nimport s from './DialogItem.module.css'\r\n\r\nconst setActive = ({isActive}) => {\r\n    return (isActive) ? s.active : ''\r\n}\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/'+ props.id\r\n    \r\n    return (\r\n        <div className={s.dialog}>\r\n            \r\n            <NavLink to= {path} className={setActive}>\r\n                <img className={s.img} src={props.img} alt='User avatar'/>\r\n                {props.name} \r\n            \r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport MessageItem from './MessageItem/MessageItem'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport { Field, Form, Formik } from \"formik\"\r\nimport * as yup from 'yup';\r\nimport { TextareaDialogs } from '../common/FormsControls/FormsControls'\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    \r\n    const sendMessage = (chatMessage) => {\r\n        props.sendMessage(chatMessage)\r\n        \r\n    }\r\n\r\n        return (\r\n            <div className={s.appWrapperContent}>\r\n                \r\n                <div className={s.pageDialogs}>\r\n                    <div className={s.dialogs}>\r\n\r\n                        {\r\n                            props.dialogs.map((d) => {\r\n                                return <DialogItem name={d.name} id={d.id} key={d.id} img={d.img}/>\r\n                            })\r\n                        }\r\n                        \r\n\r\n                    </div>\r\n                    <div className={s.messages}>\r\n                        <div className={s.messagesWrapper}>\r\n                            <div className={s.mesText}>\r\n                                {\r\n                                    props.messages.map((m) => {\r\n                                        return <MessageItem message={m.message} id={m.id} key={m.id}/>\r\n                                    })\r\n                                }\r\n                            </div>\r\n                            <СhatInputForm sendMessage={sendMessage}/>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nconst СhatInputForm = (props) => {\r\n    const validationSchema = yup.object().shape({\r\n        chatMessage: yup.string()\r\n            .max(500,'Too long')\r\n    })\r\n    return(\r\n        <Formik\r\n                initialValues={{\r\n                    chatMessage:'',\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={(values, actions) => {\r\n                    props.sendMessage(values.chatMessage)\r\n                    actions.resetForm({chatMessage: ''})\r\n\r\n                }}\r\n                validationSchema={validationSchema}\r\n                >\r\n                {({values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty}) => (\r\n                    \r\n                        <Form>\r\n                            <div>\r\n                                <Field \r\n                                placeholder='Enter your message'\r\n                                type={'text'}\r\n                                name={'chatMessage'}\r\n                                component = {TextareaDialogs}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.chatMessage}\r\n                                \r\n                                />\r\n                            </div>\r\n                            {touched.chatMessage && errors.chatMessage && <p className={s.error}>{errors.chatMessage}</p>}\r\n                            <div className={s.dialogsBtnSend}>\r\n                                \r\n                                <button\r\n                                    disabled={!isValid && !dirty}\r\n                                    onClick={handleSubmit}\r\n                                    type={'submit'}\r\n                                    \r\n                                >Send\r\n                                </button>\r\n                            </div>\r\n                        </Form>\r\n                    \r\n                )}\r\n                \r\n            </Formik>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\n\r\nimport { sendMessage, } from '../../redux/dialogs-reducer.js'\r\nimport Dialogs from './Dialogs'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        newMessageText: state.dialogsPage.newMessageText,\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,{\r\n        sendMessage: sendMessage,\r\n    }),\r\n    \r\n)(Dialogs)"],"names":["props","className","s","message","setActive","isActive","path","id","to","src","img","alt","name","СhatInputForm","validationSchema","yup","shape","chatMessage","max","initialValues","validateOnBlur","onSubmit","values","actions","sendMessage","resetForm","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","placeholder","type","component","TextareaDialogs","onChange","onBlur","value","disabled","onClick","dialogs","map","d","messages","m","compose","connect","state","dialogsPage","newMessageText","Dialogs"],"sourceRoot":""}